import os
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.sessions import StringSession

load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
MY_ID = int(os.getenv("MY_ID"))
USER_SESSION_STRING = os.getenv("USER_SESSION_STRING")

user = TelegramClient(StringSession(USER_SESSION_STRING), API_ID, API_HASH)
bot = TelegramClient("bot_session", API_ID, API_HASH)

CHANNELS = [
    -1001881412965,
    -1001246340723,
    -1001925047673,
    -1001795965474,
    -1001585782020,
    -1001661270840,
    -1002076377551,
    -1001943941408,
    -1001648319955,
    -1001495328651,
    -1001550392151,
    -1001744681450,
    -1001592219203,
    -1002158241088,
    -1001883710438,
    -1001615697742,
    -1001172446062,
    -1001605292217
]

KEYWORDS = [
    "–≤–∞–Ω—Ç–∞–∂", "–ø–µ—Ä–µ–≤–µ–∑—Ç–∏", "–ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è", "–±—É—Å", "–≥—Ä—É–∑–æ–≤–∏–π",
    "–≤—ñ–¥–≤–µ–∑—Ç–∏", "—Ä–µ—á—ñ", "–º–µ–±–ª—ñ", "–≤–µ—â–∏", "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏", "–≥—Ä—É–∑–æ–≤–æ–π"
]


@user.on(events.NewMessage(chats=CHANNELS))
async def handler(event):
    try:
        text = (event.message.message or "").lower()

        if not any(k in text for k in KEYWORDS):
            return

        # –æ—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç/–∫–∞–Ω–∞–ª
        chat = await event.get_chat()
        title = getattr(chat, "title", None) or getattr(chat, "username", None) or f"ID {chat.id}"

        # –∞–≤—Ç–æ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        sender = await event.get_sender()
        author = f"@{sender.username}" if sender and sender.username else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"

        # –ª—ñ–Ω–∫ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if getattr(chat, "username", None):
            link = f"https://t.me/{chat.username}/{event.id}"
        else:
            link = f"https://t.me/c/{str(chat.id)[4:]}/{event.id}"

        msg = (
            f"üì¢ <b>–ß–∞—Ç:</b> {title}\n"
            f"üì¶ <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> –í–∞–Ω—Ç–∞–∂–Ω—ñ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –ø–æ –∫—Ä–∞—ó–Ω—ñ\n"
            f"üåç <b>–ö—Ä–∞—ó–Ω–∞:</b> –ë–µ–ª—å–≥—ñ—è\n"
            f"üìç <b>–†–µ–≥—ñ–æ–Ω:</b> –Ω–µ–≤—ñ–¥–æ–º–æ\n"
            f"üèô <b>–ú—ñ—Å—Ç–æ:</b> –Ω–µ–≤—ñ–¥–æ–º–æ\n"
            f"üîó <b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b> {link}\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {author}\n\n"
            f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{text}"
        )

        # 1) –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–æ–º
        try:
            await bot.send_message(MY_ID, msg, parse_mode="html")
        except Exception as e:
            # —è–∫—â–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ ‚Äî –ª–æ–≥–Ω–µ–º–æ
            print("ERROR: bot.send_message failed:", repr(e))

        # 2) –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª —á–µ—Ä–µ–∑ user.forward_messages
        try:
            # Forward by message id + explicit from_peer (–Ω–∞–¥—ñ–π–Ω—ñ—à–µ)
            await user.forward_messages(MY_ID, event.message.id, from_peer=chat)
        except Exception as e:
            # –ª–æ–≥ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ—Å–∏–ª–∫–∏ ‚Äî —Ü–µ –¥–æ–ø–æ–º–æ–∂–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –ø—Ä–∏—á–∏–Ω—É
            print("ERROR: user.forward_messages failed:", repr(e))

            # fallback: —è–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª–µ–º–æ –∫–æ—Ä–æ—Ç–∫—É —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é —Ç–µ–∫—Å—Ç—É
            try:
                fallback = f"üìé (–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª) –û—Ä–∏–≥—ñ–Ω–∞–ª:\n\n{event.message.message or ''}"
                await bot.send_message(MY_ID, fallback)
            except Exception as e2:
                print("ERROR: bot.send_message (fallback) failed:", repr(e2))

    except Exception as main_exc:
        # –ó–∞–≥–∞–ª—å–Ω–∏–π –ª–æ–≥, —â–æ–± –Ω—ñ—á–æ–≥–æ –Ω–µ –≥—É–±–∏–ª–æ—Å—å
        print("ERROR in handler:", repr(main_exc))


async def main():
    await bot.start(bot_token=BOT_TOKEN)
    await user.start()
    print("‚úÖ –ë–æ—Ç —ñ —é–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω—ñ")
    await user.run_until_disconnected()


if __name__ == "__main__":
    asyncio.run(main())
