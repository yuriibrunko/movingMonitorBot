import os
import time
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.sessions import StringSession

# –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
MY_ID = int(os.getenv("MY_ID"))
USER_SESSION_STRING = os.getenv("USER_SESSION_STRING")

# —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤
user = TelegramClient(StringSession(USER_SESSION_STRING), API_ID, API_HASH)
bot = TelegramClient("bot_session", API_ID, API_HASH)

# –∫–∞–Ω–∞–ª–∏, —è–∫—ñ —Ä–µ–∞–ª—å–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ (‚ö†Ô∏è –ù–ï –¥–æ–¥–∞–≤–∞–π —Å—é–¥–∏ —Å–≤–æ–≥–æ –±–æ—Ç–∞!)
CHANNELS = [
    "@o_brunko",
]

# –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
KEYWORDS = [
    "–≤–∞–Ω—Ç–∞–∂", "–ø–µ—Ä–µ–≤–µ–∑—Ç–∏", "–ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è", "–±—É—Å", "–≥—Ä—É–∑–æ–≤–∏–π",
    "–≤—ñ–¥–≤–µ–∑—Ç–∏", "—Ä–µ—á—ñ", "–º–µ–±–ª—ñ", "–≤–µ—â–∏", "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏", "–≥—Ä—É–∑–æ–≤–æ–π"
]

# –∞–Ω—Ç–∏—Å–ø–∞–º (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É)
last_alert = {}


@user.on(events.NewMessage(chats=CHANNELS))
async def handler(event):
    text = (event.message.message or "").lower()

    if any(k in text for k in KEYWORDS):
        chat = await event.get_chat()
        title = getattr(chat, "title", None) or getattr(chat, "username", None) or f"ID {chat.id}"

        # –∞–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ –±—ñ–ª—å—à–µ 1 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É –∑–∞ 60 —Å–µ–∫—É–Ω–¥
        now = time.time()
        if chat.id in last_alert and now - last_alert[chat.id] < 60:
            return
        last_alert[chat.id] = now

        await bot.send_message(
            MY_ID,
            f"üîî –ó–Ω–∞–π—à–æ–≤ –∑–±—ñ–≥ —É <b>{title}</b>:\n\n{text}",
            parse_mode="html"
        )


async def main():
    # –∑–∞–ø—É—Å–∫–∞—î–º–æ –æ–±–æ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
    await bot.start(bot_token=BOT_TOKEN)
    await user.start()
    print("‚úÖ –ë–æ—Ç —ñ —é–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω—ñ")
    await user.run_until_disconnected()


if __name__ == "__main__":
    asyncio.run(main())
